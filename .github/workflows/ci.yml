name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: '部署環境'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10'

jobs:
  # 依賴安裝和類型檢查
  setup-and-check:
    runs-on: ubuntu-latest
    name: 環境設置和檢查

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 類型檢查
        run: pnpm type-check

      - name: 代碼風格檢查
        run: pnpm lint:check

      - name: 代碼格式化檢查
        run: pnpm format:check

  # 構建測試
  build:
    needs: setup-and-check
    runs-on: ubuntu-latest
    name: 構建和測試

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 構建基礎包
        run: |
          pnpm build:types
          pnpm build:ui

      - name: 構建前端
        run: pnpm build:web

      - name: 構建 API
        run: pnpm build:api

      - name: 運行測試
        run: pnpm test:ci

      - name: 上傳測試覆蓋率
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # 代碼質量檢查
  code-quality:
    needs: setup-and-check
    runs-on: ubuntu-latest
    name: 代碼質量檢查

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 運行測試覆蓋率
        run: pnpm test:coverage

      - name: 檢查測試覆蓋率門檻
        run: |
          COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')
          echo "當前測試覆蓋率: ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 70" | bc -l) )); then
            echo "❌ 測試覆蓋率低於 70% 門檻"
            exit 1
          else
            echo "✅ 測試覆蓋率達到門檻要求"
          fi

      - name: 上傳測試覆蓋率到 Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # 安全檢查
  security:
    needs: setup-and-check
    runs-on: ubuntu-latest
    name: 安全檢查

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 運行安全審計
        run: pnpm audit --audit-level moderate

      - name: 檢查依賴漏洞
        run: |
          if pnpm audit --audit-level moderate; then
            echo "✅ 未發現高風險安全漏洞"
          else
            echo "⚠️ 發現安全漏洞，請檢查並修復"
            exit 1
          fi

  # 上傳構建產物
  upload-artifacts:
    needs: [build, code-quality, security]
    runs-on: ubuntu-latest
    name: 上傳構建產物

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 創建部署包
        run: |
          echo "📦 創建部署包..."
          mkdir -p deployment
          cp -r apps/web/.next deployment/web/
          cp -r apps/api/dist deployment/api/
          cp package.json deployment/
          cp pnpm-lock.yaml deployment/
          cp pnpm-workspace.yaml deployment/

      - name: 上傳部署包
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deployment/
          retention-days: 7

      - name: 構建完成通知
        run: |
          echo "🎉 構建和測試完成！"
          echo "構建時間: $(date)"
          echo "Git 提交: ${{ github.sha }}"
          echo "分支: ${{ github.ref_name }}"
          echo "構建產物已上傳，請使用專門的部署工作流程進行部署"

  # 開發環境部署通知
  dev-notification:
    if: github.ref == 'refs/heads/develop'
    needs: [upload-artifacts]
    runs-on: ubuntu-latest
    name: 開發環境部署通知

    steps:
      - name: 通知開發環境部署
        run: |
          echo "🚀 開發環境部署觸發"
          echo "分支: ${{ github.ref_name }}"
          echo "請使用 dev-deploy.yml 工作流程進行開發環境部署"

  # 生產環境部署通知
  production-notification:
    if: github.ref == 'refs/heads/main'
    needs: [upload-artifacts]
    runs-on: ubuntu-latest
    name: 生產環境部署通知

    steps:
      - name: 通知生產環境部署
        run: |
          echo "🚀 生產環境部署觸發"
          echo "分支: ${{ github.ref_name }}"
          echo "請使用 production-deploy.yml 工作流程進行生產環境部署"

  # 構建完成總結
  build-summary:
    if: always()
    needs: [upload-artifacts, dev-notification, production-notification]
    runs-on: ubuntu-latest
    name: 構建完成總結

    steps:
      - name: 構建狀態總結
        run: |
          echo "📊 CI/CD 構建狀態總結..."
          echo "構建產物: ${{ needs.upload-artifacts.result || 'skipped' }}"
          echo "開發環境通知: ${{ needs.dev-notification.result || 'skipped' }}"
          echo "生產環境通知: ${{ needs.production-notification.result || 'skipped' }}"

      - name: 發送構建報告
        if: always()
        run: |
          echo "📧 發送構建報告..."
          echo "🎉 CI 階段完成，請使用專門的部署工作流程進行部署"
