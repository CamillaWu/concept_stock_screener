name: 開發環境快速部署

on:
  workflow_dispatch:
    inputs:
      skip_quality_checks:
        description: '跳過代碼品質檢查'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: '跳過測試'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: '強制部署（忽略錯誤）'
        required: false
        default: false
        type: boolean
      deploy_message:
        description: '部署說明'
        required: false
        default: '快速部署'
        type: string

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  ENVIRONMENT: 'development'

jobs:
  # 快速構建
  quick-build:
    runs-on: ubuntu-latest
    name: 快速構建
    timeout-minutes: 8

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 設置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 安裝 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 安裝依賴
        run: pnpm install --frozen-lockfile

      - name: 快速代碼檢查
        if: ${{ !inputs.skip_quality_checks }}
        run: |
          echo "🔍 快速代碼檢查..."
          pnpm lint:check || echo "代碼風格檢查失敗，但繼續部署"
          pnpm type-check || echo "類型檢查失敗，但繼續部署"

      - name: 構建應用
        run: |
          echo "🔨 快速構建應用..."
          pnpm build:types || echo "類型包構建失敗"
          pnpm build:ui || echo "UI 包構建失敗"
          pnpm build:web || echo "前端構建失敗"
          pnpm build:api || echo "API 構建失敗"

      - name: 快速測試
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "🧪 快速測試..."
          pnpm test:unit || echo "單元測試失敗，但繼續部署"

      - name: 創建快速部署包
        run: |
          echo "📦 創建快速部署包..."
          mkdir -p quick-deployment

          # 複製構建產物（忽略錯誤）
          cp -r apps/web/.next quick-deployment/web/ 2>/dev/null || echo "前端構建產物複製失敗"
          cp -r apps/api/dist quick-deployment/api/ 2>/dev/null || echo "API 構建產物複製失敗"
          cp -r packages/types/dist quick-deployment/types/ 2>/dev/null || echo "類型包複製失敗"
          cp -r packages/ui/dist quick-deployment/ui/ 2>/dev/null || echo "UI 包複製失敗"

          # 複製必要文件
          cp package.json quick-deployment/
          cp pnpm-lock.yaml quick-deployment/
          cp pnpm-workspace.yaml quick-deployment/
          cp -r config quick-deployment/
          cp -r scripts quick-deployment/

          # 創建部署信息
          cat > quick-deployment/quick-deploy-info.txt << EOF
          快速部署信息
          ================
          部署時間: $(date)
          Git 提交: ${{ github.sha }}
          分支: ${{ github.ref_name }}
          觸發者: ${{ github.actor }}
          部署說明: ${{ inputs.deploy_message }}
          跳過品質檢查: ${{ inputs.skip_quality_checks }}
          跳過測試: ${{ inputs.skip_tests }}
          強制部署: ${{ inputs.force_deploy }}
          EOF

      - name: 上傳快速部署包
        uses: actions/upload-artifact@v3
        with:
          name: quick-dev-deployment
          path: quick-deployment/
          retention-days: 3

  # 快速部署
  quick-deploy:
    needs: quick-build
    runs-on: ubuntu-latest
    name: 快速部署
    environment: development
    timeout-minutes: 12

    steps:
      - name: 檢出代碼
        uses: actions/checkout@v4

      - name: 下載快速部署包
        uses: actions/download-artifact@v3
        with:
          name: quick-dev-deployment
          path: quick-deployment/

      - name: 開始快速部署
        run: |
          echo "⚡ 開始快速部署到開發環境..."
          echo "環境: ${{ env.ENVIRONMENT }}"
          echo "部署時間: $(date)"
          echo "Git 提交: ${{ github.sha }}"
          echo "分支: ${{ github.ref_name }}"
          echo "觸發者: ${{ github.actor }}"
          echo "部署說明: ${{ inputs.deploy_message }}"

      - name: 快速部署 API
        run: |
          echo "🔌 快速部署 API 服務..."
          cd quick-deployment

          # 這裡可以添加實際的快速 API 部署邏輯
          # 例如：直接部署到開發服務器
          echo "API 服務快速部署完成"

      - name: 快速部署前端
        run: |
          echo "🌐 快速部署前端應用..."
          cd quick-deployment

          # 這裡可以添加實際的快速前端部署邏輯
          echo "前端應用快速部署完成"

      - name: 快速部署數據管道
        run: |
          echo "📊 快速部署數據管道..."
          cd quick-deployment

          # 這裡可以添加實際的快速數據管道部署邏輯
          echo "數據管道快速部署完成"

      - name: 更新快速部署狀態
        run: |
          echo "✅ 快速部署完成"
          echo "完成時間: $(date)"

          # 創建快速部署狀態
          cat > quick-deployment/quick-deploy-status.json << EOF
          {
            "status": "success",
            "environment": "${{ env.ENVIRONMENT }}",
            "deployed_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "git_commit": "${{ github.sha }}",
            "git_branch": "${{ github.ref_name }}",
            "triggered_by": "${{ github.actor }}",
            "deploy_message": "${{ inputs.deploy_message }}",
            "deploy_type": "quick"
          }
          EOF

  # 快速驗證
  quick-verification:
    needs: quick-deploy
    runs-on: ubuntu-latest
    name: 快速驗證
    timeout-minutes: 5

    steps:
      - name: 等待服務啟動
        run: |
          echo "⏳ 等待服務啟動..."
          sleep 15

      - name: 快速健康檢查
        run: |
          echo "🏥 快速健康檢查..."

          # 這裡可以添加基本的健康檢查
          # 例如：檢查服務是否響應
          echo "快速健康檢查完成"

      - name: 快速功能驗證
        run: |
          echo "🧪 快速功能驗證..."

          # 這裡可以添加基本的功能驗證
          # 例如：測試主要 API 端點
          echo "快速功能驗證完成"

  # 快速部署通知
  quick-notification:
    needs: [quick-deploy, quick-verification]
    runs-on: ubuntu-latest
    name: 快速部署通知
    if: always()

    steps:
      - name: 發送快速部署成功通知
        if: needs.quick-deploy.result == 'success' && needs.quick-verification.result == 'success'
        run: |
          echo "⚡ 開發環境快速部署成功！"
          echo "部署時間: $(date)"
          echo "Git 提交: ${{ github.sha }}"
          echo "分支: ${{ github.ref_name }}"
          echo "觸發者: ${{ github.actor }}"
          echo "部署說明: ${{ inputs.deploy_message }}"

          # 這裡可以添加快速部署成功通知

      - name: 發送快速部署失敗通知
        if: needs.quick-deploy.result == 'failure' || needs.quick-verification.result == 'failure'
        run: |
          echo "❌ 開發環境快速部署失敗"
          echo "失敗時間: $(date)"
          echo "Git 提交: ${{ github.sha }}"
          echo "分支: ${{ github.ref_name }}"
          echo "觸發者: ${{ github.actor }}"
          echo "部署說明: ${{ inputs.deploy_message }}"

          # 這裡可以添加快速部署失敗通知

      - name: 創建快速部署摘要
        run: |
          echo "📊 快速部署摘要"
          echo "=================="
          echo "環境: ${{ env.ENVIRONMENT }}"
          echo "部署狀態: ${{ needs.quick-deploy.result || 'skipped' }}"
          echo "驗證狀態: ${{ needs.quick-verification.result || 'skipped' }}"
          echo "總體結果: ${{ job.status }}"
          echo "部署說明: ${{ inputs.deploy_message }}"
          echo "完成時間: $(date)"
